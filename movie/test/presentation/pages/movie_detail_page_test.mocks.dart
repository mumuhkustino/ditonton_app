// Mocks generated by Mockito 5.4.4 from annotations
// in movie/test/presentation/pages/movie_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/movie.dart' as _i2;
import 'package:watchlist/watchlist.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMovieDetail_0 extends _i1.SmartFake
    implements _i2.GetMovieDetail {
  _FakeGetMovieDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMovieRecommendations_1 extends _i1.SmartFake
    implements _i2.GetMovieRecommendations {
  _FakeGetMovieRecommendations_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailState_2 extends _i1.SmartFake
    implements _i2.MovieDetailState {
  _FakeMovieDetailState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchlistMovie_3 extends _i1.SmartFake
    implements _i3.GetWatchlistMovie {
  _FakeGetWatchlistMovie_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchlistMoviesStatus_4 extends _i1.SmartFake
    implements _i3.GetWatchlistMovieStatus {
  _FakeGetWatchlistMoviesStatus_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveWatchlistMovie_5 extends _i1.SmartFake
    implements _i3.SaveWatchlistMovie {
  _FakeSaveWatchlistMovie_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlistMovie_6 extends _i1.SmartFake
    implements _i3.RemoveWatchlistMovie {
  _FakeRemoveWatchlistMovie_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWatchlistMovieState_7 extends _i1.SmartFake
    implements _i3.WatchlistMovieState {
  _FakeWatchlistMovieState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailCubit extends _i1.Mock implements _i2.MovieDetailCubit {
  MockMovieDetailCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail => (super.noSuchMethod(
        Invocation.getter(#getMovieDetail),
        returnValue: _FakeGetMovieDetail_0(
          this,
          Invocation.getter(#getMovieDetail),
        ),
      ) as _i2.GetMovieDetail);

  @override
  _i2.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(
        Invocation.getter(#getMovieRecommendations),
        returnValue: _FakeGetMovieRecommendations_1(
          this,
          Invocation.getter(#getMovieRecommendations),
        ),
      ) as _i2.GetMovieRecommendations);

  @override
  _i2.MovieDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMovieDetailState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.MovieDetailState);

  @override
  _i4.Stream<_i2.MovieDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.MovieDetailState>.empty(),
      ) as _i4.Stream<_i2.MovieDetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void fetchMovieDetail(int? id) => super.noSuchMethod(
        Invocation.method(
          #fetchMovieDetail,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.MovieDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i5.Change<_i2.MovieDetailState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WatchlistMovieCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistMovieCubit extends _i1.Mock
    implements _i3.WatchlistMovieCubit {
  MockWatchlistMovieCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetWatchlistMovie get getWatchlistMovies => (super.noSuchMethod(
        Invocation.getter(#getWatchlistMovies),
        returnValue: _FakeGetWatchlistMovie_3(
          this,
          Invocation.getter(#getWatchlistMovies),
        ),
      ) as _i3.GetWatchlistMovie);

  @override
  _i3.GetWatchlistMovieStatus get getWatchlistMoviesStatus =>
      (super.noSuchMethod(
        Invocation.getter(#getWatchlistMoviesStatus),
        returnValue: _FakeGetWatchlistMoviesStatus_4(
          this,
          Invocation.getter(#getWatchlistMoviesStatus),
        ),
      ) as _i3.GetWatchlistMovieStatus);

  @override
  _i3.SaveWatchlistMovie get saveWatchlistMovies => (super.noSuchMethod(
        Invocation.getter(#saveWatchlistMovies),
        returnValue: _FakeSaveWatchlistMovie_5(
          this,
          Invocation.getter(#saveWatchlistMovies),
        ),
      ) as _i3.SaveWatchlistMovie);

  @override
  _i3.RemoveWatchlistMovie get removeWatchlistMovies => (super.noSuchMethod(
        Invocation.getter(#removeWatchlistMovies),
        returnValue: _FakeRemoveWatchlistMovie_6(
          this,
          Invocation.getter(#removeWatchlistMovies),
        ),
      ) as _i3.RemoveWatchlistMovie);

  @override
  _i3.WatchlistMovieState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWatchlistMovieState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.WatchlistMovieState);

  @override
  _i4.Stream<_i3.WatchlistMovieState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.WatchlistMovieState>.empty(),
      ) as _i4.Stream<_i3.WatchlistMovieState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void loadWatchlistMoviesStatus(int? id) => super.noSuchMethod(
        Invocation.method(
          #loadWatchlistMoviesStatus,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fetchWatchlistMovies() => super.noSuchMethod(
        Invocation.method(
          #fetchWatchlistMovies,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addWatchlistMovies(_i2.MovieDetail? movie) => super.noSuchMethod(
        Invocation.method(
          #addWatchlistMovies,
          [movie],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteWatchlistMovies(int? id) => super.noSuchMethod(
        Invocation.method(
          #deleteWatchlistMovies,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.WatchlistMovieState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i5.Change<_i3.WatchlistMovieState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
